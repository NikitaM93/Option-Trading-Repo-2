
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.lang.Integer;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.GridLayout;
import javax.swing.JLabel;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import javax.swing.JOptionPane;

public class hedgealpha extends javax.swing.JFrame {

    public static ArrayList<MarketDate> dates=new ArrayList<MarketDate>();
    public static ArrayList<Double> logreturns=new ArrayList<Double>();
    public static ArrayList<Double> averagelogs=new ArrayList<Double>();
    public static ArrayList<Double> variancecalcs=new ArrayList<Double>();
    public static double annualvolprime;
    public static double pi=3.14159265358979;
    public static double annualvolprimeimplied;
    public static long daysToMaturity=timeToMaturity(2014,4,25,0,1);
    public static int daysToMaturityPrime2=(int) daysToMaturity;


    public hedgealpha() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        firstNameLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        surnameLabel = new javax.swing.JLabel();
        surnameField = new javax.swing.JTextField();
        streetLabel = new javax.swing.JLabel();
        streetField = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        cityField = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();
        stateCombo = new javax.swing.JComboBox();
        workPhoneLabel = new javax.swing.JLabel();
        workPhoneField = new javax.swing.JTextField();
        cellPhoneLabel = new javax.swing.JLabel();
        cellPhoneField = new javax.swing.JTextField();
        homePhoneLabel = new javax.swing.JLabel();
        satelitePhoneField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        contactLabel = new javax.swing.JLabel();
        contactSeparator = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        phoneSeparator = new javax.swing.JSeparator();
        phoneLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        realPremiumLabel = new javax.swing.JLabel();
        realPremiumField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        firstNameLabel.setText("Spot Price:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(firstNameLabel, gridBagConstraints);

        firstNameField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(firstNameField, gridBagConstraints);

        surnameLabel.setText("Strike:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(surnameLabel, gridBagConstraints);

        surnameField.setColumns(10);
        surnameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surnameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(surnameField, gridBagConstraints);

        streetLabel.setText("Maturity Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(streetLabel, gridBagConstraints);

        streetField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(streetField, gridBagConstraints);

        cityLabel.setText("Rate (r):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(cityLabel, gridBagConstraints);

        cityField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(cityField, gridBagConstraints);

        stateLabel.setText("Call/Put:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(stateLabel, gridBagConstraints);

        stateCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose...", "c", "p" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(stateCombo, gridBagConstraints);

        realPremiumLabel.setText("Real Premium:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(realPremiumLabel, gridBagConstraints);

        realPremiumField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(realPremiumField, gridBagConstraints);

        workPhoneLabel.setText("Option Premium:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(workPhoneLabel, gridBagConstraints);

        workPhoneField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(workPhoneField, gridBagConstraints);

        cellPhoneLabel.setText("Greeks:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(cellPhoneLabel, gridBagConstraints);

        cellPhoneField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(cellPhoneField, gridBagConstraints);

        homePhoneLabel.setText("Implied Vol.:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(homePhoneLabel, gridBagConstraints);

        satelitePhoneField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(satelitePhoneField, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        contactLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        contactLabel.setText("Inputs:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(contactLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(contactSeparator, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(phoneSeparator, gridBagConstraints);

        phoneLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        phoneLabel.setText("Outputs:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(phoneLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        cancelButton.setText("Exit");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel7.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel3.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel8.add(jPanel3, gridBagConstraints);

        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        jPanel8.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_TRAILING;
        getContentPane().add(jPanel8, gridBagConstraints);

        jLabel1.setText("(USD)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("(mm dd yyy)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("(Decimal: r/100)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("(USD)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        getContentPane().add(jLabel4, gridBagConstraints);

        jButton2.setText("Enter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        getContentPane().add(jButton2, gridBagConstraints);

        jLabel5.setText("Dividend (q):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        getContentPane().add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField1, gridBagConstraints);

        jLabel6.setText("(Decimal: q/100)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jLabel6, gridBagConstraints);

        pack();
    }// </editor-fold>                        

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        System.exit(0);
    }                                            

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    firstNameField.setText("");
    surnameField.setText("");
    streetField.setText("");
    cityField.setText("");
    workPhoneField.setText("");
    cellPhoneField.setText("");
    jTextField1.setText("");
    realPremiumField.setText("");
    stateCombo.setSelectedIndex(0);


    //homePhoneField.setText("");
    
    }                                        

    private void surnameFieldActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
            // First we define float variables.
    double spot, strike, NbExp, rate, q;
    String optionType, time;
    // We have to parse the text to a type float.
    spot = Double.parseDouble(firstNameField.getText());
    strike = Double.parseDouble(surnameField.getText());
    rate = Double.parseDouble(cityField.getText());
    q = Double.parseDouble(jTextField1.getText());

    String input = streetField.getText(); 
    String[] inputTokens = input.split(" "); 
    int years=0;
    int months=0;
    int days=0;

    months = Integer.parseInt(inputTokens[0]);
    days=Integer.parseInt(inputTokens[1]);
    years=Integer.parseInt(inputTokens[2]);

    optionType = (String)(stateCombo.getSelectedItem());

    System.out.println("  "+spot+"   "+strike+"   "+rate+"   "+q+"  "+years+"   "+months+"  "+days+"   "+optionType+"  "); 

    reader();
        
        
    //MAKES VOL, vol is saved in annualvolprime variable. 
    logreturn(dates);
    averagelog(logreturns);
    variancecalc(logreturns);
    varianceaverage(variancecalcs);
    stdev(varianceaverage(variancecalcs));
    annualvol(stdev(varianceaverage(variancecalcs)));

   
/*
    long daysToMaturity=timeToMaturity(2014,4,25,0,1);
    int daysToMaturityPrime2=(int) daysToMaturity;


    double SgOption=OptionPrice(531.17,510.00,daysToMaturityPrime2,annualvolprime,0.0012,0,c);
        //long SgOptionPut=OptionPrice(64.82,59.50,daysToMaturityPrime2,annualvolprime,0.0012,0,p);
        
    double SgGreek=greeks(544.70,525.00,daysToMaturityPrime2,annualvolprime,0.0013,0.0001,c);

    double impliedvol=annualvolimplied(SgOption, 24.10);
*/




    //for (int i = 0; i < inputTokens.length; i++) { 
          //  System.out.println(inputTokens[i]); 
       // }
    
    
    
   // Now we can perform the addition.
    //result = num1+num2;
    // We will now pass the value of result to jTextField3.
    // At the same time, we are going to
    // change the value of result from a float to a string.
    //workPhoneField.setText(String.valueOf(result));

    }                                        

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hedgealpha().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField cellPhoneField;
    private javax.swing.JLabel cellPhoneLabel;
    private javax.swing.JTextField cityField;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JSeparator contactSeparator;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel homePhoneLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JSeparator phoneSeparator;
    private javax.swing.JTextField satelitePhoneField;
    private javax.swing.JComboBox stateCombo;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField streetField;
    private javax.swing.JLabel streetLabel;
    private javax.swing.JTextField surnameField;
    private javax.swing.JLabel surnameLabel;
    private javax.swing.JTextField workPhoneField;
    private javax.swing.JLabel workPhoneLabel;
    private javax.swing.JTextField realPremiumField;
    private javax.swing.JLabel realPremiumLabel;
    // End of variables declaration      





    public static double OptionPrice(double spot, double strike, double NbExp, double vol, double rate, double q, String optionType){
        double v, d1, d2, Nd1, Nd2, T, result;
        //System.out.println(spot);
        //System.out.println(strike);
        //System.out.println(NbExp);
        //System.out.println(vol);
        //System.out.println(rate);
        //System.out.println(q);
        //System.out.println(optionType);
        
        if(NbExp<0)
            return 0;
        
        T=NbExp/365;
        if(NbExp==0){
            if(optionType.equals("c")){
                System.out.println("TESTTESTTESTTEST"+(long) (Math.max(spot-strike,0)));
                return (double) (Math.max(spot-strike,0));
            }
            else{
                System.out.println("TESTTESTTESTTEST"+(long) (Math.max(spot-strike,0)));
                return (double) (Math.max(strike-spot,0));  
            }
        }
        
        d1=((Math.log(spot/strike))+(rate-q+(vol*vol)/2)*T)/(vol*Math.sqrt(T));
        //System.out.println("TESTTESTTESTTEST");
        //System.out.println((Math.log(spot/strike)));
        //System.out.println(vol*Math.sqrt(T));
        //System.out.println("TESTTESTTESTTEST"+d1);
        
        d2=d1-vol*Math.sqrt(T);
        //System.out.println("TESTTESTTESTTEST2  "+d2);
        Nd1=cdnf(d1);
        //System.out.println("TESTTESTTESTTEST Nd1  "+Nd1);
        Nd2=cdnf(d2);
        //System.out.println("TESTTESTTESTTEST Nd2  "+Nd2);
        if(optionType.equals("c")){ //call option
            //System.out.println((long) (spot*Math.exp(-q*T)*Nd1-strike*Math.exp(-rate*T)*Nd2));
            return (double) (spot*Math.exp(-q*T)*Nd1-strike*Math.exp(-rate*T)*Nd2);
        }
        
        else //put option
            return (double) (-spot*Math.exp(-q*T)*(1-Nd1)+strike*Math.exp(-rate*T)*(1-Nd2));
    }
    
    public static double greeks(double spot, double strike, double NbExp, double vol, double rate, double q, String optionType){
        double v, d1, d2, Nd1, Nd2, T, result, dS, dv, dr;
        double dt;
        double delta, gamma, vega, theta, rho;
        
        dS=0.01; //0.01 point move in spot
        dv=0.0001; //0.01% move in vol
        dt=1; //1 day
        dr=0.0001; //1bps move
        
        if(NbExp<0)
            //System.out.println("TESTTESTTESTTEST");
            return 0;
        
        double x=(double)(OptionPrice(spot+dS,strike,NbExp,vol,rate,q,optionType));
        double x2=(double)OptionPrice(spot-dS,strike,NbExp,vol,rate,q,optionType);
        //System.out.println(x);
        //System.out.println(x2);
        //System.out.println(dS);
        //System.out.println((x-x2)/(2*dS));
        
        delta=(double) ((OptionPrice(spot+dS,strike,NbExp,vol,rate,q,optionType)-OptionPrice(spot-dS,strike,NbExp,vol,rate,q,optionType))/(2*dS));
        
        gamma=(double) ((OptionPrice(spot+dS,strike,NbExp,vol,rate,q,optionType)-2*OptionPrice(spot,strike,NbExp,vol,rate,q,optionType)+OptionPrice(spot-dS,strike,NbExp,vol,rate,q,optionType))/(dS*dS));
        vega=(double) ((OptionPrice(spot,strike,NbExp,vol+dv,rate,q,optionType)-OptionPrice(spot,strike,NbExp,vol-dv,rate,q,optionType))/(2*dv)/100);
        rho=(double) ((OptionPrice(spot,strike,NbExp,vol,rate+dr,q,optionType)-OptionPrice(spot,strike,NbExp,vol,rate-dr,q,optionType))/(2*dr)/1000);

        if(NbExp==0){
            //System.out.println("TESTTESTTESTTEST");
            theta=0;
        }
        else 
            theta=(double) ((OptionPrice(spot,strike,NbExp-dt,vol,rate,q,optionType)-OptionPrice(spot,strike,NbExp+dt,vol,rate,q,optionType))/(2*dt));
        
        System.out.println("delta>>>>>>"+delta);
        System.out.println("gamma>>>>>>"+gamma);
        System.out.println("vega>>>>>>"+vega);
        System.out.println("rho>>>>>>"+rho);
        return 0;
    }
    
    public static long timeToMaturity(int year, int month, int day, int hour, int minute){
        Date maturity=new GregorianCalendar(year, month, day, hour, minute).getTime();
        /** Today's date */
        Date today=new Date();
        // Get msec from each, and subtract.
        long diff=maturity.getTime()-today.getTime();
        long timeToMaturity=diff/ (1000 * 60 * 60 * 24);
        return timeToMaturity;
    }
    
    //Reference:http://stackoverflow.com/questions/442758/which-java-library-computes-the-cumulative-standard-normal-distribution-function
    public static double cdnf(double x){
        int neg=(x<0d)?1:0;
        if (neg==1) 
            x*=-1d;
        double k=(1d/(1d+0.2316419*x));
        double y=((((1.330274429*k-1.821255978)*k+1.781477937)*k-0.356563782)*k+0.319381530)*k;
        y=1.0-0.398942280401*Math.exp(-0.5*x*x)*y;
        //System.out.println((1d-neg)*y+neg*(1d-y));
        return (1d-neg)*y+neg*(1d-y);
    }
    
    //For Call Options
    public static double annualvolimplied(double modelOption, double realOption){
        double volimplied=stdev(varianceaverage(variancecalcs));
        double annualvolimplied=0;
        double real=realOption;
        double model=modelOption;
        
        if(real==model){
            annualvolimplied=annualvol2(volimplied);
        }
        
        else if(real>model){
            do{
                volimplied=volimplied+0.00001;
                model=OptionPrice(531.17,510.00,daysToMaturityPrime2,annualvol2(volimplied),0.0012,0,"c");
                annualvolimplied=annualvol2(volimplied);
            }while(real>model);
        }
        else
            do{
                volimplied=volimplied-0.00001;
                model=OptionPrice(531.17,510.00,daysToMaturityPrime2,annualvol2(volimplied),0.0012,0,"c");
                annualvolimplied=annualvol2(volimplied);
            }while(real<model);
        
        return annualvolimplied;    
    }
    
    public static double annualvol2(double stdev){
        double x=Math.sqrt(252);
        double annualvol2=x*stdev;
        //System.out.println("AnnualVolImplied:"+annualvol);
        //annualvolprimeimplied=annualvol2;
        return annualvol2;  
    }
    
    
    //*********************Volatility Calc*******************************************************************************************
    public static void logreturn(ArrayList dates){
        for(int i=0; i<dates.size()-1; i++){
            MarketDate day2=(MarketDate) dates.get(i);
            MarketDate day1=(MarketDate) dates.get(i+1);
            double x= Math.log(day1.getAdjClose()/day2.getAdjClose());
            //System.out.println("Day :"+ i+ ":" + x);
            logreturns.add(x);
        }
    }
    
    public static double averagelog(ArrayList logreturns){
        double sum=0;
        double counter=0;
        for(int i=0; i<logreturns.size()-1; i++){
            double y=(Double) logreturns.get(i);
            sum+=y;
            //System.out.println(sum);
            counter++;  
        }
        double x=sum/counter;
        //System.out.println(x);
        return x;
    }
    
    public static void variancecalc(ArrayList logreturns){
        for(int i=0; i<logreturns.size()-1; i++){
            double y=(Double) logreturns.get(i);
            double yprime=y-averagelog(logreturns);
            variancecalcs.add(Math.pow(yprime,2));
        }
    }
    
    public static double varianceaverage(ArrayList variancecalc){
        double sum=0;
        double counter=0;
        for(int i=0; i<variancecalc.size()-1; i++){
            double y=(Double) variancecalc.get(i);
            sum+=y;
            //System.out.println(sum);
            counter++;  
        }
        double x=sum/counter;
        System.out.println("******************");
        System.out.println("VarAvrg:"+x);
        return x;
    }
    
    public static double stdev(double varianceAvrg){
        double x=Math.sqrt(varianceAvrg);
        System.out.println("Stdev:"+x);
        return x;   
    }
    
    public static double annualvol(double stdev){
        double x=Math.sqrt(252);
        double annualvol=x*stdev;
        System.out.println("AnnualVol:"+annualvol);
        annualvolprime=annualvol;
        return annualvol;   
    }
    //************************************************************************************************************************************
    public static void reader(File f){        
        try{
            Scanner sc=new Scanner(f);

            int y=0;
            while(sc.hasNextLine()&&y<61){
                String line=sc.nextLine();
                String[] info=line.split(",");
                
                
                String date=info[0];
                double open=Double.parseDouble(info[1]);
                double high=Double.parseDouble(info[2]);
                double low=Double.parseDouble(info[3]);
                double close=Double.parseDouble(info[4]);
                double volume=Double.parseDouble(info[5]);
                double adjclose=Double.parseDouble(info[6]);
                
                MarketDate d=new MarketDate(date, open, high, low, close, volume, adjclose);
                dates.add(d);
                y++;
            }

            for(MarketDate d: dates){
                System.out.println(d.toString());
            }

        }
        catch (FileNotFoundException e) {         
            e.printStackTrace();
        }
    }
    public static void reader(){        
        try{
            File file = new File("volcode.txt");
            Scanner sc=new Scanner(file);
            
            int y=0;
            while(sc.hasNextLine()&&y<61){
                String line=sc.nextLine();
                String[] info=line.split(",");
                
                
                String date=info[0];
                double open=Double.parseDouble(info[1]);
                double high=Double.parseDouble(info[2]);
                double low=Double.parseDouble(info[3]);
                double close=Double.parseDouble(info[4]);
                double volume=Double.parseDouble(info[5]);
                double adjclose=Double.parseDouble(info[6]);
                
                MarketDate d=new MarketDate(date, open, high, low, close, volume, adjclose);
                dates.add(d);
                y++;
            }

            for(MarketDate d: dates){
                System.out.println(d.toString());
            }

        }
        catch (FileNotFoundException e) {         
            e.printStackTrace();
        }
    }
    
    //************************************************************************************************************************************
    //************************************************************************************************************************************
    //************************************************************************************************************************************
    //********************************Wiki implementation*********************************************************************************
    //**********************************of Black Scholes**********************************************************************************
    //************************************************************************************************************************************
    //************************************************************************************************************************************
    //************************************************************************************************************************************
    //************************************************************************************************************************************
        
    public static long europeanCallPrice(double vol, long maturity, double spot, double strike, double rate){
        long Nd1S=(long) (cdnf(d1(vol, maturity, spot, strike, rate))*spot);
        //System.out.println(Nd1S);
        long Nd2KerTt= (long) (cdnf(d2(vol, maturity, spot, strike, rate))*strike*Math.exp(-rate*maturity));
        long callprice=Nd1S-Nd2KerTt;
        return callprice;
    }
    
    public static long europeanPutPrice(double vol, long maturity, double spot, double strike, double rate){
        long KerTt= (long) (strike*Math.exp(-rate*maturity));
        long putprice=(long) (KerTt-spot+europeanCallPrice(vol, maturity, spot, strike, rate));
        return putprice;
    }
    
    public static double d1(double vol, long maturity, double spot, double strike, double rate){
        double d1;
        double a1=1/(vol*Math.sqrt(maturity));
        double a2=Math.log(spot/strike);
        double a3=(rate+((vol*vol)/2))*(maturity);
        d1=(a2+a3)*a1;
        return d1;
    }
    
    public static double d2(double vol, long maturity, double spot, double strike, double rate){
        double d2;
        double a1=1/(vol*Math.sqrt(maturity));
        double a2=Math.log(spot/strike);
        double a3=(rate-((vol*vol)/2))*(maturity);
        d2=(a2+a3)*a1;
        return d2;
    }

}

class MarketDate{

    private String date;
    private double open;
    private double high;
    private double low;
    private double close;
    private double volume;
    private double adjclose;
    private double weight;
    
    public MarketDate(String date, double open, double high, double low, double close, double volume, double adjclose){
        this.setDate(date);
        this.open=open;
        this.high=high;
        this.low=low;
        this.close=close;
        this.volume=volume;
        this.adjclose=adjclose;     
        weight=1;
    }
    public String getDate(){
        return date;
    }
    public void setDate(String date){
        this.date=date;
    }
    public double getOpen(){
        return open;
    }
    public double getHigh(){
        return high;
    }
    public double getLow(){
        return low;
    }
    public double getClose(){
        return close;
    }
    public double getVolume(){
        return volume;
    }
    public double getAdjClose(){
        return adjclose;
    }
    public String toString(){
        return this.date + " " + this.open + " " + this.high + " " + this.low + " " + this.close + " " + this.volume + " " + this.adjclose;
    }
}
